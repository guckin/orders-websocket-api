AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  orders-websocket-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  OrdersWebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: OrdersWebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrdersWebSocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrdersWebSocketAPI
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrdersWebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrdersWebSocketAPI
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SubscribeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrdersWebSocketAPI
      RouteKey: subscribe
      AuthorizationType: NONE
      OperationName: SubscribeRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SubscribeInteg
  SubscribeInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrdersWebSocketAPI
      Description: Subscribe Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnSubscribeFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - SubscribeRoute
    Properties:
      ApiId: !Ref OrdersWebSocketAPI
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref OrdersWebSocketAPI
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Policies:
      - DynamoDBCrudPolicy:
          TableName: OrdersWebSocketSubscriptions
    Properties:
      PackageType: Image
      ImageUri: ECR URL
      ImageConfig:
        Command: [ "lambdas.onConnectFunction" ]
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: .
      Dockerfile: Dockerfile
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrdersWebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Policies:
      - DynamoDBCrudPolicy:
          TableName: OrdersWebSocketSubscriptions
    Properties:
      PackageType: Image
      ImageUri: ECR URL
      ImageConfig:
        Command: [ "lambdas.onDisconnectFunction" ]
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: .
      Dockerfile: Dockerfile
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrdersWebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  OnSubscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: OrdersWebSocketSubscriptions
      PackageType: Image
      ImageUri: ECR URL
      ImageConfig:
        Command: [ "lambdas.onSubscribeFunction" ]
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: .
      Dockerfile: Dockerfile
  OnSubscribePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrdersWebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnSubscribeFunction
      Principal: apigateway.amazonaws.com
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "orderId"
          AttributeType: "S"
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: OrderIdGSI
          KeySchema:
            - AttributeName: "orderId"
              KeyType: "HASH"
          Projection:
            ProjectionType: All
        - IndexName: ConnectionIdGSI
          KeySchema:
            - AttributeName: "connectionId"
              KeyType: "HASH"
          Projection:
            ProjectionType: All
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: OrdersWebSocketSubscriptions

Outputs:

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  OnSubscribeFunctionArn:
    Description: "OnSubscribeFunction function ARN"
    Value: !GetAtt OnSubscribeFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref OrdersWebSocketAPI, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
